
//Stream.periodic
Future<void> main () async {
  
  //!periodic -> nao preciso de um streamcontroller
  final interval = Duration(seconds:2) // -> a cada 2 segundos ele vai fazer algo
  final stream = Stream<int>.periodic(interval, callback)
  
  //stream fica recebendo dados infinitamente
  
  await for(var i in stream) {
  //await for fica como um loop infinito(loop toda hora) porém ele só vai funcionar quando a stream receber algum tipo de valor !!
  print(i);
  }	
}

int callback(int value) {
   return (value + 1)  * 2;
}




//Parando uma stream com Take
Future<void> main () async {  

 
  final interval = Duration(seconds:2)
  var stream = Stream<int>.periodic(interval, callback) 
 
  //Take -> Estipulamos quantos valores ele vai receber
  //ou seja aqui estamos falando que ele vai receber somente 5 requisições e depois vai mata essa stream
  stream = stream.Take(5);
  
  //ou seja ele vai executar somente o numero de requisições que queremos e depois ele mata a stream
  
  await for(var i in stream) {  
  print(i);
  }	
}

int callback(int value) {
   return (value + 1)  * 2;
}





//Parando uma stream com TakeWhile
Future<void> main () async {  

 
  final interval = Duration(seconds:2)
  var stream = Stream<int>.periodic(interval, callback) 
 
  //TakeWhile -> faz a mesma coisa que o take, porém ele recebe uma condição (faça ou pare enquanto faz algo)
  //ou seja aqui eu digo se o numero for menor que 10 continua executando
  stream = stream.TakeWhile((int numero) => numero < 10);
  
  //ou seja ele vai sempre matar a stream conforme a condição(ele vai sempre analizar a saida)
  
  await for(var i in stream) {  
  print(i);
  }	
}

int callback(int value) {
   return (value + 1)  * 2;
}



//Skip
Future<void> main () async {  
 
  final interval = Duration(seconds:2)
  var stream = Stream<int>.periodic(interval, callback)  
  
  
  //Skip -> Pular, não executar a ação
  //aqui eu estou dizendo que nao quero que execute os dois primeiros
  stream = stream.Take(5).skip(2);
   
  await for(var i in stream) {  
  print(i);
  }	
}

int callback(int value) {
   return (value + 1)  * 2;
}




//SkipWhile
Future<void> main () async {  
 
  final interval = Duration(seconds:2)
  var stream = Stream<int>.periodic(interval, callback)  
  
  
  //SkipWhile -> vai pular algo conforme a condição que a gente fizer
  stream = stream.Take(5).SkipWhile((numero) {
    return numero < 5;	
  });
   
  await for(var i in stream) {  
  print(i);
  }	
}

int callback(int value) {
   return (value + 1)  * 2;
}


